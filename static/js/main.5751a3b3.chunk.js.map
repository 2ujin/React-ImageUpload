{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","displayData_img","displayData_gif","state","showdata","showdata2","width","postVal","showMe","showMe1","color","colorr","counter","file","appendData","bind","appendData_gif","handleChange","handleChange_gif","this","push","id","src","setState","displayData","e","style","document","getElementById","file_extension","value","slice","indexOf","toLowerCase","target","files","reader","FileReader","_URL","readAsDataURL","window","URL","webkitURL","img","Image","createObjectURL","onload","result","console","log","height","size","visibility","alert","location","assign","className","type","onClick","cancel_upload","background","boxShadow","click","click2","align","valign","list","see_guide","onChange","submit","React","PureComponent","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5751a3b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nexport default class App extends React.PureComponent {\r\n\r\n  constructor() {\r\n    super();\r\n    var color1 = '#ffffff';\r\n    var color2 = '#f2f2f2';\r\n\r\n    this.displayData_img= [];\r\n    this.displayData_gif = [];\r\n    \r\n    this.state = {\r\n      showdata : this.displayData_img,  \r\n      showdata2 : this.displayData_gif,\r\n      width: 0,\r\n      postVal : \"\",\r\n      showMe : true,\r\n      showMe1 : false,\r\n      color: color2,\r\n      colorr : color1,  \r\n      counter : 0,\r\n      file : \"\",\r\n    }\r\n    this.appendData = this.appendData.bind(this);\r\n    this.appendData_gif = this.appendData_gif.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChange_gif = this.handleChange_gif.bind(this);\r\n    \r\n  };\r\n\r\n  appendData(){\r\n    if(this.state.postVal!=\"\"){\r\n      this.displayData_img.push(<div id=\"display-data\"><img src={this.state.postVal} id=\"image\"></img></div>);\r\n    }\r\n    this.setState({\r\n       showdata : this.displayData,\r\n      //  showdata2 : this.displayData_gif,\r\n       postVal : \"\"\r\n    });\r\n  }\r\n\r\n  handleChange(e) { // 파일 업로드시 저장\r\n    var style = document.getElementById('meme');\r\n    var file_extension = document.getElementById('file').value;\r\n    file_extension = file_extension.slice(file_extension.indexOf(\".\") + 1).toLowerCase();\r\n\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    const url = reader.readAsDataURL(file);\r\n\r\n    var _URL = window.URL || window.webkitURL;\r\n    var img = new Image();\r\n\r\n    img.src = _URL.createObjectURL(file);\r\n\r\n    reader.onload = function(e){  \r\n     this.setState({\r\n       postVal :reader.result,\r\n       file : file,\r\n       width : img.width,\r\n     }); \r\n     console.log(this.state.postVal);\r\n     img.onload = function(e) {\r\n      const width = this.width;\r\n      const height = this.height;\r\n      \r\n      if(width==408 && height==408 && file_extension=='png' && file.size<=512000){\r\n        style.style.visibility = \"visible\";\r\n      }\r\n      else if(file_extension!='png'){\r\n        alert('png 파일만 가능합니다!');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else if(file.size>=512000){\r\n        alert('용량이 너무 큽니다 ㅠㅠ');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else if(width!=408 && height!=408){\r\n        alert('408px * 408px 사이즈만 가능합니다!');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else{\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n    }\r\n    }.bind(this); \r\n  }\r\n\r\n  appendData_gif() {\r\n    if(this.state.postVal!=\"\"){\r\n      this.displayData_gif.push(<div id=\"display-data\"><img src={this.state.postVal} id=\"image\"></img></div>);\r\n    }\r\n    this.setState({\r\n       showdata2 : this.displayData_gif,\r\n       postVal : \"\"\r\n    });\r\n  }\r\n\r\n  handleChange_gif(e) { // 파일 업로드시 저장\r\n    var style = document.getElementById('meme');\r\n    var file_extension = document.getElementById('file').value;\r\n    file_extension = file_extension.slice(file_extension.indexOf(\".\") + 1).toLowerCase();\r\n\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    const url = reader.readAsDataURL(file);\r\n\r\n    var _URL = window.URL || window.webkitURL;\r\n    var img = new Image();\r\n\r\n    img.src = _URL.createObjectURL(file);\r\n\r\n    reader.onload = function(e){  \r\n     this.setState({\r\n       postVal :reader.result,\r\n       file : file,\r\n     }); \r\n     \r\n     img.onload = function(e) {\r\n      const width = this.width;\r\n      const height = this.height;\r\n\r\n      if(width==408 && height==408 && file_extension=='gif' && file.size<=512000){\r\n        style.style.visibility = \"visible\";\r\n      }\r\n      else if(file_extension!='gif'){\r\n        alert('gif 파일만 가능합니다!');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else if(file.size>=512000){\r\n        alert('용량이 너무 큽니다 ㅠㅠ');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else if(width!=408 && height!=408){\r\n        alert('408px * 408px 사이즈만 가능합니다!');\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n      else{\r\n        style.style.visibility = \"hidden\";\r\n      }\r\n    }\r\n    }.bind(this); \r\n  }\r\n\r\nclick(){ //스티커\r\n  var color1 = '#ffffff';\r\n  var color2 = '#f2f2f2';\r\n  this.setState({\r\n    showMe: false,\r\n    showMe1: true,\r\n    color: color1,\r\n    colorr: color2\r\n  })\r\n}\r\nclick2(){ //움직이는 스티커\r\n  var color1 = '#ffffff';\r\n  var color2 = '#f2f2f2';\r\n  this.setState({\r\n    showMe: true,\r\n    showMe1: false, \r\n    color: color2,\r\n    colorr: color1\r\n  })\r\n}\r\n\r\nsee_guide(){ //작성 가이드 이동\r\n  window.location.assign('https://studio.stipop.io/howtocreate');\r\n}\r\n\r\nsubmit(){ // 제출 버튼\r\n  if(this.state.counter+1 < 5){\r\n    alert(\"최소 5개 선택해주세요!\");\r\n  }\r\n  if(this.state.counter+1 > 30){\r\n    alert(\"등록 숫자를 넘어섰습니다!\");\r\n\r\n  }\r\n}\r\n\r\ncancel_upload(){ // 업로드 취소 버튼\r\n  alert(\"업로드 창을 닫으시겠습니까? 닫으시면 작성한 내용이 지워집니다.\");\r\n}\r\n  render() {\r\n    return (\r\n      <main className=\"image-upload\">\r\n         <img src=\"https://studio.stipop.io/static/images/logo-pink.svg\" className=\"title\" />\r\n        <img src=\"https://studio.stipop.io/static/images/tag-studio.png\" className=\"studio\"/>\r\n        <button type=\"button\" id=\"cancle_upload\" onClick={()=>this.cancel_upload()}>업로드 취소 X</button>\r\n          <div className=\"page\"> \r\n          {/* '스티커', '움직이는 스티커' 버튼 */}\r\n            <div id=\"change_div\"> \r\n              <div style={{background: this.state.color, boxShadow: '9px -3px 9px -3px rgba(202, 202, 202, 0.637)'}} id=\"sticker\" onClick={()=>this.click()}>움직이는 스티커</div>\r\n              <div style={{background: this.state.colorr, boxShadow: '-3px -3px 9px -3px rgba(202, 202, 202, 0.637)'}} id=\"move_sticker\" onClick={()=>this.click2()}>스티커</div>\r\n            </div>\r\n            {/* 본문 - info(스티커 정보)와 upload(스티커 업로드) 부분으로 구성  */}\r\n            <div id=\"main\">\r\n            <div id=\"info\">\r\n              <table>\r\n                <tr>\r\n                  <td>스티커 이름<br></br></td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>스티커 이름은 50자 이내여야하며 글자와 숫자만 사용할 수 있습니다.</code>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>캐릭터 명</td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>영숫자만 사용하여 문자 이름 쓰기.</code></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>카테고리</td>\r\n                  <td align=\"left\" valign=\"middle\"><button id=\"btn\">Animation/Cartoon</button><button>Animals</button><button>Celebrity</button><button>Food/Drink</button>\r\n                  <br></br><button id=\"btn\">Gag</button><button>Holloween</button><button>People</button><button>Pharase</button><button>Romance</button>\r\n                  <br></br><button id=\"btn\">Sports</button><button>Etc.</button>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>키워드</td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>2-5 개의 키워드를 써주세요. 쉼표를 사용하여 키워드를 구분해주세요.</code></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>언어</td>\r\n                  <td><input type=\"text\" id=\"input\" list=\"language\"></input></td>\r\n                  <datalist id=\"language\">\r\n                    <option value=\"English\"></option>\r\n                    <option value=\"French\"></option>\r\n                    <option value=\"Korean\"></option>\r\n                    <option value=\"Czech\"></option>\r\n                  </datalist>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            {this.state.showMe? // png 업로드 \r\n              <div id=\"UploadSticker\">\r\n                <h4>파일</h4><button type=\"button\" id=\"create\" onClick={()=>this.see_guide()}>창작 가이드 보기</button><br></br>\r\n                <p>PNG, 500kb 이하 408 x 408 px, 최소 5개 최대 30개 스티커</p>\r\n                <p id=\"p2\">메인 스티커는 스티커를 모두 업로드 한 후에 메인 스티커 칸으로 드래그 해주세요.</p>\r\n                <div id =\"img-box\">\r\n                  {/* 파일 업로드 */}\r\n                  <input type=\"file\" id=\"file\" onChange={this.handleChange}></input><br></br>                  \r\n                  <input type=\"submit\" id=\"meme\" onClick={this.appendData} value=\"클릭\"/>\r\n                <div id=\"show_image\"> \r\n                  {this.displayData_img}\r\n                </div>\r\n                </div>\r\n                <button id=\"submit\" onClick={()=>this.submit()}>제출하기</button>\r\n            </div>\r\n            :null}\r\n            {this.state.showMe1? // gif 업로드\r\n              <div id=\"UploadGif\">\r\n                <h4>파일</h4><button type=\"button\" id=\"create\" onClick={()=>this.see_guide()}>창작 가이드 보기</button><br></br>\r\n                <p>움직이는 스티커: GIF, 500kb 이하, 408 x 408 px</p>\r\n                <p id=\"p2\">메인 스티커는 스티커를 모두 업로드 한 후에 메인 스티커 칸으로 드래그 해주세요.</p> \r\n                <div id=\"gif-box\">\r\n                  {/* 파일 업로드 */}\r\n                  <input type=\"file\" id=\"file\" onChange={this.handleChange_gif}></input><br></br>\r\n                  <input type=\"submit\" id=\"meme\" className=\"button\" onClick={this.appendData_gif} value=\"클릭\"/>\r\n                <div id=\"show_image\"> \r\n                  {this.displayData_gif}\r\n                </div>  \r\n                </div>\r\n                <button id=\"submit\" onClick={()=>this.submit()}>제출하기</button>\r\n              </div>\r\n            :null}\r\n          </div> \r\n          </div>\r\n      </main>\r\n    );\r\n  }\r\n  }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}