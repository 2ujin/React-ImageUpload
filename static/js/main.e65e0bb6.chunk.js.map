{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","appendData","event","file","target","files","reader","FileReader","readAsDataURL","onload","e","this","setState","imgSrc","result","counter","state","bind","displayData","push","id","src","showdata","postVal","showMe","showMe1","color","colorr","window","location","assign","alert","className","type","style","background","boxShadow","onClick","click","click2","align","valign","list","value","see_guide","class","accept","onChange","submit","ref","displayData2","React","PureComponent","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e65e0bb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport default class App extends React.PureComponent {\r\n  \r\n  constructor() {\r\n    super();\r\n    var color1 = '#ffffff';\r\n    var color2 = '#f2f2f2';\r\n\r\n    this.displayData = [];\r\n    this.state = {\r\n      showdata : this.displayData,\r\n      postVal : \"\",\r\n      showMe : true,\r\n      showMe1 : false,\r\n      color: color2,\r\n      colorr : color1,\r\n      counter : 0\r\n    }\r\n    this.appendData = this.appendData.bind(this);\r\n  };\r\n  \r\n\r\nappendData=event => {\r\n  const file = event.target.files[0];\r\n  const reader = new FileReader();\r\n  const url = reader.readAsDataURL(file);\r\n\r\n  reader.onload = function (e) {\r\n    this.setState({\r\n        imgSrc: [reader.result],\r\n        counter : this.state.counter + 1\r\n    })\r\n  }.bind(this);\r\n  \r\n  // console.log(this.state.counter+1); // 첫 값은 undefinded가 나온다 ..\r\n  this.displayData.push(<div id=\"display-data\"><img src={this.state.imgSrc} id=\"image\"></img></div>);\r\n  }\r\nclick(){\r\n  var color1 = '#ffffff';\r\n  var color2 = '#f2f2f2';\r\n  this.setState({\r\n    showMe: false,\r\n    showMe1: true,\r\n    color: color1,\r\n    colorr: color2\r\n  })\r\n}\r\nclick2(){\r\n  var color1 = '#ffffff';\r\n  var color2 = '#f2f2f2';\r\n  this.setState({\r\n    showMe: true,\r\n    showMe1: false, \r\n    color: color2,\r\n    colorr: color1\r\n  })\r\n}\r\nsee_guide(){\r\n  window.location.assign('https://studio.stipop.io/howtocreate');\r\n}\r\nsubmit(){\r\n  if(this.state.counter+1 < 5){\r\n    alert(\"최소 5개 선택해주세요!\");\r\n  }\r\n  if(this.state.counter+1 > 30){\r\n    alert(\"등록 숫자를 넘어섰습니다!\");\r\n\r\n  }\r\n}\r\n  render() {\r\n    return (\r\n      <main className=\"image-upload\">\r\n        <img src=\"https://studio.stipop.io/static/images/logo-pink.svg\" className=\"title\" />\r\n        <img src=\"https://studio.stipop.io/static/images/tag-studio.png\" className=\"studio\"/>\r\n        <button type=\"button\" id=\"cancle_upload\">업로드 취소 X</button>\r\n          <div className=\"page\"> \r\n            <div id=\"change_div\">\r\n              <div style={{background: this.state.color, boxShadow: '9px -3px 9px -3px rgba(202, 202, 202, 0.637)'}} id=\"sticker\" onClick={()=>this.click()}>움직이는 스티커</div>\r\n              <div style={{background: this.state.colorr, boxShadow: '-3px -3px 9px -3px rgba(202, 202, 202, 0.637)'}} id=\"move_sticker\" onClick={()=>this.click2()}>스티커</div>\r\n            </div>\r\n            <div id = \"main\">\r\n            <div id=\"info\">\r\n              <table>\r\n                <tr>\r\n                  <td>스티커 이름<br></br></td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>스티커 이름은 50자 이내여야하며 글자와 숫자만 사용할 수 있습니다.</code>\r\n                  </td>\r\n                  \r\n                </tr>\r\n                <tr>\r\n                  <td>캐릭터 명</td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>영숫자만 사용하여 문자 이름 쓰기.</code></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>카테고리</td>\r\n                  <td align=\"left\" valign=\"middle\"><button id=\"btn\">Animation/Cartoon</button><button>Animals</button><button>Celebrity</button><button>Food/Drink</button>\r\n                  <br></br><button id=\"btn\">Gag</button><button>Holloween</button><button>People</button><button>Pharase</button><button>Romance</button>\r\n                  <br></br><button id=\"btn\">Sports</button><button>Etc.</button>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>키워드</td>\r\n                  <td><input type=\"text\" id=\"input\"></input><br></br>\r\n                  <code>2 - 5 개의 키워드를 써주세요. 쉼표를 사용하여 키워드를 구분해주세요.</code></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>언어</td>\r\n                  <td><input type=\"text\" id=\"input\" list=\"language\"></input></td>\r\n                  <datalist id=\"language\">\r\n                    <option value=\"컴퓨터공학과\"></option>\r\n                    <option value=\"영어영문과\"></option>\r\n                    <option value=\"경영학과\"></option>\r\n                    <option value=\"사회체육과\"></option>\r\n                  </datalist>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            {this.state.showMe? // 사진 업로드 \r\n              <div id=\"mainContainer\">\r\n                <h4>파일</h4><button type=\"button\" id=\"create\" onClick={()=>this.see_guide()}>창작 가이드 보기</button><br></br>\r\n                <p>PNG, 500kb 이하 408 x 408 px, 최소 5개 최대 30개 스티커</p>\r\n                <p id=\"p2\">메인 스티커는 스티커를 모두 업로드 한 후에 메인 스티커 칸으로 드래그 해주세요.</p>\r\n                <div id =\"img-box\">\r\n                  <div class=\"file_input_div\">\r\n                    <input type=\"button\" value=\"업로드!\" class=\"file_input_button\" />\r\n                    <input type=\"file\" id=\"file\" class=\"file_input_hidden\" accept=\".png\" onChange={this.appendData} />\r\n                  </div>\r\n                <div id=\"show_image\"> \r\n                  {this.displayData}\r\n                </div>\r\n                </div>\r\n                <div id=\"submit\" onClick={()=>this.submit()}>제출하기</div>\r\n            </div>\r\n            :null}\r\n            {this.state.showMe1? // gif 업로드\r\n              <div id=\"mainContainer2\">\r\n                <h4>파일</h4><button type=\"button\" id=\"create\" onClick={()=>this.see_guide()}>창작 가이드 보기</button><br></br>\r\n                <p>움직이는 스티커: GIF, 500kb 이하, 408 x 408 px</p>\r\n                <p id=\"p2\">메인 스티커는 스티커를 모두 업로드 한 후에 메인 스티커 칸으로 드래그 해주세요.</p> \r\n              <div id=\"gif-box\">\r\n                  <input ref=\"file\" type=\"file\" className=\"button\" onChange={this.appendData}/>\r\n                <div id=\"show_image\"> \r\n                  {this.displayData2}\r\n                </div>\r\n                </div>\r\n              </div>\r\n            :null}\r\n          </div> \r\n          </div>\r\n      </main>\r\n    );\r\n  }\r\n  }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}